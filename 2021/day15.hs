import System.IO
import AoCUtils

type Risk = Int
type Cave = ([Risk], [Risk], [[Risk]])

main = do input <- getContents
          let cave =  map (map (\x -> read [x] ::Int)) $ lines input
              -- parsedCave = parseCave cave
              bigCave = embiggenCave 5 cave
          -- print $ day151 parsedCave
          -- print cave
          print $ day151' cave
          print $ day151' bigCave

-- | Find the shortest path in the cave
-- >>> day151 ([1,6,3,7],[1,2],[[3,8,1,3],[1,3,6,5]])
-- 18
-- >>> day151 ([2,3],[4,7],[[5,6],[8,9]])
-- 20
-- >>> day151 ([1,6,3,7,5,1,7,4,2],[1,2,3,7,1,1,3,1,2],[[3,8,1,3,7,3,6,7,2],[1,3,6,5,1,1,3,2,8],[6,9,4,9,3,1,5,6,9],[4,6,3,4,1,7,1,1,1],[3,1,9,1,2,8,1,3,7],[3,5,9,9,1,2,4,2,1],[1,2,5,4,2,1,6,3,9],[2,9,3,1,3,8,5,2,1],[3,1,1,9,4,4,5,8,1]])
-- 40
day151 = sum . lowestRiskPath

-- | Find the shortest path in the cave
-- >>> day151' [[1,1,6,3,7,5,1,7,4,2],[1,3,8,1,3,7,3,6,7,2],[2,1,3,6,5,1,1,3,2,8],[3,6,9,4,9,3,1,5,6,9],[7,4,6,3,4,1,7,1,1,1],[1,3,1,9,1,2,8,1,3,7],[1,3,5,9,9,1,2,4,2,1],[3,1,2,5,4,2,1,6,3,9],[1,2,9,3,1,3,8,5,2,1],[2,3,1,1,9,4,4,5,8,1]]
-- 40
day151' c = let w = length $ head c
                h = length c
             in sum $ lowestRiskPath'' c (w-1) (h-1)

-- | Parse a cave into up, left and rest components
-- >>> parseCave [[1,1,6,3,7,5,1,7,4,2],[1,3,8,1,3,7,3,6,7,2],[2,1,3,6,5,1,1,3,2,8],[3,6,9,4,9,3,1,5,6,9],[7,4,6,3,4,1,7,1,1,1],[1,3,1,9,1,2,8,1,3,7],[1,3,5,9,9,1,2,4,2,1],[3,1,2,5,4,2,1,6,3,9],[1,2,9,3,1,3,8,5,2,1],[2,3,1,1,9,4,4,5,8,1]]
-- ([1,6,3,7,5,1,7,4,2],[1,2,3,7,1,1,3,1,2],[[3,8,1,3,7,3,6,7,2],[1,3,6,5,1,1,3,2,8],[6,9,4,9,3,1,5,6,9],[4,6,3,4,1,7,1,1,1],[3,1,9,1,2,8,1,3,7],[3,5,9,9,1,2,4,2,1],[1,2,5,4,2,1,6,3,9],[2,9,3,1,3,8,5,2,1],[3,1,1,9,4,4,5,8,1]])
parseCave :: [[Int]] -> Cave
parseCave (x:xs) = let up = tail x
                       left = map head xs
                       rest = map tail xs
                    in (up, left, rest)

-- | Make the cave bigger by replicating the map in both directions
-- >>> embiggenCave 2 [[1,2],[3,9]]
-- [[1,2,2,3],[3,9,4,1],[2,3,3,4],[4,1,5,2]]
-- >>> embiggenCave 5 [[1,1,6,3,7,5,1,7,4,2],[1,3,8,1,3,7,3,6,7,2],[2,1,3,6,5,1,1,3,2,8],[3,6,9,4,9,3,1,5,6,9],[7,4,6,3,4,1,7,1,1,1],[1,3,1,9,1,2,8,1,3,7],[1,3,5,9,9,1,2,4,2,1],[3,1,2,5,4,2,1,6,3,9],[1,2,9,3,1,3,8,5,2,1],[2,3,1,1,9,4,4,5,8,1]]
-- [[1,1,6,3,7,5,1,7,4,2,2,2,7,4,8,6,2,8,5,3,3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6],[1,3,8,1,3,7,3,6,7,2,2,4,9,2,4,8,4,7,8,3,3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6],[2,1,3,6,5,1,1,3,2,8,3,2,4,7,6,2,2,4,3,9,4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3],[3,6,9,4,9,3,1,5,6,9,4,7,1,5,1,4,2,6,7,1,5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4],[7,4,6,3,4,1,7,1,1,1,8,5,7,4,5,2,8,2,2,2,9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5],[1,3,1,9,1,2,8,1,3,7,2,4,2,1,2,3,9,2,4,8,3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2],[1,3,5,9,9,1,2,4,2,1,2,4,6,1,1,2,3,5,3,2,3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5],[3,1,2,5,4,2,1,6,3,9,4,2,3,6,5,3,2,7,4,1,5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4],[1,2,9,3,1,3,8,5,2,1,2,3,1,4,2,4,9,6,3,2,3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5],[2,3,1,1,9,4,4,5,8,1,3,4,2,2,1,5,5,6,9,2,4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5],[2,2,7,4,8,6,2,8,5,3,3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7],[2,4,9,2,4,8,4,7,8,3,3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7],[3,2,4,7,6,2,2,4,3,9,4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4],[4,7,1,5,1,4,2,6,7,1,5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5],[8,5,7,4,5,2,8,2,2,2,9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6],[2,4,2,1,2,3,9,2,4,8,3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3],[2,4,6,1,1,2,3,5,3,2,3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6],[4,2,3,6,5,3,2,7,4,1,5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5],[2,3,1,4,2,4,9,6,3,2,3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6],[3,4,2,2,1,5,5,6,9,2,4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6],[3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8],[3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8],[4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5],[5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6],[9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7],[3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4],[3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7],[5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6],[3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7],[4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7],[4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8,8,8,4,1,5,3,8,5,2,9],[4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8,8,1,6,8,1,5,1,4,5,9],[5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5,9,8,1,4,3,8,8,1,9,6],[6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6,1,4,7,2,7,1,8,3,4,7],[1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7,5,2,4,1,2,8,5,8,8,8],[4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4,8,1,8,7,8,9,6,8,1,5],[4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7,8,1,3,7,7,8,9,2,9,8],[6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6,1,8,9,3,2,9,8,4,1,7],[4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7,8,9,7,1,8,1,6,3,9,8],[5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7,9,1,8,8,7,2,2,3,6,8],[5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8,8,8,4,1,5,3,8,5,2,9,9,9,5,2,6,4,9,6,3,1],[5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8,8,1,6,8,1,5,1,4,5,9,9,2,7,9,2,6,2,5,6,1],[6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5,9,8,1,4,3,8,8,1,9,6,1,9,2,5,4,9,9,2,1,7],[7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6,1,4,7,2,7,1,8,3,4,7,2,5,8,3,8,2,9,4,5,8],[2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7,5,2,4,1,2,8,5,8,8,8,6,3,5,2,3,9,6,9,9,9],[5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4,8,1,8,7,8,9,6,8,1,5,9,2,9,8,9,1,7,9,2,6],[5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7,8,1,3,7,7,8,9,2,9,8,9,2,4,8,8,9,1,3,1,9],[7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6,1,8,9,3,2,9,8,4,1,7,2,9,1,4,3,1,9,5,2,8],[5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7,8,9,7,1,8,1,6,3,9,8,9,1,8,2,9,2,7,4,1,9],[6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7,9,1,8,8,7,2,2,3,6,8,1,2,9,9,8,3,3,4,7,9]]
embiggenCave :: Int -> [[Int]] -> [[Int]]
embiggenCave n c = emtallen n $ map (embiggen n) c

-- | Embiggen a single row
-- >>> embiggen 5 [1,1,6,3,7,5,1,7,4,2]
-- [1,1,6,3,7,5,1,7,4,2,2,2,7,4,8,6,2,8,5,3,3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6]
embiggen :: Int -> [Int] -> [Int]
embiggen 0 _ = []
embiggen n r = r ++ map (wrapAddOne) (embiggen (n-1) r)

-- | Make a cave taller... it is late
-- >>> emtallen 5 [[1],[2],[3]]
-- [[1],[2],[3],[2],[3],[4],[3],[4],[5],[4],[5],[6],[5],[6],[7]]
emtallen :: Int -> [[Int]] -> [[Int]]
emtallen 0 _ = []
emtallen n c = c ++ map (map (wrapAddOne)) (emtallen (n-1) c)

-- | Add two Ints, wrapping around between 1 and 9
-- >>> wrapAddOne 2 
-- 3
-- >>> wrapAddOne 9
-- 1
wrapAddOne :: Int -> Int
wrapAddOne x = if x+1>=10 then 1 else x+1

-- | From [0]
-- [0] https://stackoverflow.com/a/5553390/10660788
memo :: (Int -> Int -> a) -> [[a]]
memo f = map (\x -> map (f x) [0..]) [0..]

pathStore :: [[Risk]] -> [[[Risk]]]
pathStore c = memo (lowestRiskPath' c)

fastLowestRiskPath :: [[Risk]] -> Int -> Int -> [Risk]
fastLowestRiskPath c x y = pathStore c !! x !! y

-- | Memoised version of lowestRiskPath
-- >>> lowestRiskPath' [[1,2,3],[4,5,6],[7,8,9]] 0 0
-- []
-- >>> lowestRiskPath' [[1,2,3],[4,5,6],[7,8,9]] 1 1
-- [6,9]
-- >>> lowestRiskPath' [[1,2,3],[4,5,6],[7,8,9]] 2 2
-- [2,3,6,9]
lowestRiskPath' :: [[Risk]] -> Int -> Int -> [Risk]
lowestRiskPath' c 0 0 = []
lowestRiskPath' c x y
  | y >= (length c) = error "y too large"
  | x >= (length $ head c) = error "x too large"
  | otherwise = let w = length c
                    h = length $ head c
                    x' = w-x-1
                    y' = h-y-1
                    rightPath = if x-1 >= 0
                                  then [c !! (x'+1) !! y'] ++ (fastLowestRiskPath c (x-1) y)
                                  else [div maxBound 2]
                    downPath = if y-1 >= 0
                                 then [c !! x' !! (y'+1)] ++ (fastLowestRiskPath c x (y-1))
                                 else [div maxBound 2]
                 in if (sum downPath)<(sum rightPath) then downPath else rightPath

-- | Variation on memoised version of lowestRiskPath
-- Based on [1]
-- [1] https://www.ryanhmckenna.com/2015/05/memoization-in-haskell.html
-- >>> lowestRiskPath'' [[1,2,3],[4,5,6],[7,8,9]] 0 0
-- []
-- >>> lowestRiskPath'' [[1,2,3],[4,5,6],[7,8,9]] 1 1
-- [6,9]
-- >>> lowestRiskPath'' [[1,2,3],[4,5,6],[7,8,9]] 2 2
-- [2,3,6,9]
lowestRiskPath'' :: [[Risk]] -> Int -> Int -> [Risk]
lowestRiskPath'' c x y
  | y >= (length c) = error "y too large"
  | x >= (length $ head c) = error "x too large"
  | otherwise = localPathStore !! x !! y where
          localPathStore = memo (lrp c)
          lrp _ 0 0 = []
          lrp c x y = let w = length c
                          h = length $ head c
                          x' = w-x-1
                          y' = h-y-1
                          rightPath = if x-1 >= 0
                                         then [c !! (x'+1) !! y'] ++ (localPathStore !! (x-1) !! y)
                                         else [div maxBound 2]
                          downPath = if y-1 >= 0
                                        then [c !! x' !! (y'+1)] ++ (localPathStore !! x !! (y-1))
                                        else [div maxBound 2]
                        in if (sum downPath)<(sum rightPath) then downPath else rightPath

-- | Find the lowest-risk path through the cave
-- [9]
-- >>> lowestRiskPath ([9],[],[])
-- [9]
-- >>> lowestRiskPath ([],[9],[])
-- [9]
-- >>> lowestRiskPath ([6],[8],[[9]])
-- [6,9]
-- >>> lowestRiskPath ([2,3],[4,7],[[5,6],[8,9]])
-- [2,3,6,9]
lowestRiskPath :: Cave -> [Risk]
lowestRiskPath ([],[x],[]) = [x]
lowestRiskPath ([x],[],[]) = [x]
-- lowestRiskPath ([],[],[[x]]) = [x]
-- lowestRiskPath cave@([],[],_) = []
lowestRiskPath cave@(up,left,rest) = let rightPath = case up of
                                                       [] -> [div maxBound 2]
                                                       _ -> [head up] ++ (lowestRiskPath $ goRight cave)
                                         downPath = case left of
                                                      [] -> [div maxBound 2]
                                                      _ -> [head left] ++ (lowestRiskPath $ goDown cave)
                                      in if (sum downPath)<(sum rightPath)
                                           then downPath
                                           else rightPath

-- | Go right in the cave
-- >>> goRight ([2,3],[4,7],[[5,6],[8,9]])
-- ([3],[5,8],[[6],[9]])
-- >>> goRight ([3],[5,8],[[6],[9]])
-- ([],[6,9],[])
-- >>> goRight ([6],[8],[[9]])
-- ([],[9],[])
-- >>> goRight ([8,9],[],[])
-- ([9],[],[])
goRight :: Cave -> Cave
goRight ((x:xs),_,[]) = (xs,[],[])
goRight (_,_,[]) = ([],[],[])
goRight (up,left,rest) = let newRest = map tail rest
                          in (
  tail up
  ,map head rest
  ,case (sum $ map length newRest) of
      0 -> []
      _ -> newRest
  )

-- | Go down in the cave
-- >>> goDown ([2,3],[4,7],[[5,6],[8,9]])
-- ([5,6],[7],[[8,9]])
-- >>> goDown ([5,6],[7],[[8,9]])
-- ([8,9],[],[])
-- >>> goDown([6],[8],[[9]])
-- ([9],[],[])
-- >>> goDown ([],[6,9],[])
-- ([],[9],[])
goDown :: Cave -> Cave
goDown (_,(x:xs),[]) = ([],xs,[])
goDown (_,_,[]) = ([],[],[])
goDown (up,left,rest) = (
  head rest
  ,tail left
  ,tail rest)
